trigger:
  branches:
    include:
    - '*'
    - 'refs/tags/*'

stages:
- stage: Build
  jobs:
  # osx build
  - template: ci/build-unix.yml
    parameters:
      name: osx_x64
      pool:
        vmImage: 'macOS-latest'
      rid: 'osx-x64'
      output: 'libjieba-c.dylib'

  # dockcross builds
  - template: ci/build-dockcross.yml
    parameters:
      name: linux_x64_dockcross
      arch: linux-x64
      rid: 'linux-x64'
  - template: ci/build-dockcross.yml
    parameters:
      name: linux_x86_dockcross
      arch: linux-x86
      rid: 'linux-x86'
  - template: ci/build-dockcross.yml
    parameters:
      name: linux_armv7_dockcross
      arch: linux-armv7
      rid: 'linux-arm'
  - template: ci/build-dockcross.yml
    parameters:
      name: linux_arm64_dockcross
      arch: linux-arm64
      rid: 'linux-arm64'
  - template: ci/build-dockcross.yml
    parameters:
      name: android_arm_dockcross
      arch: android-arm
      rid: 'android-arm'
  - template: ci/build-dockcross.yml
    parameters:
      name: android_arm64_dockcross
      arch: android-arm64
      rid: 'android-arm64'

  # windows builds
  - template: ci/build-windows.yml
    parameters:
      name: win_x64
      pool:
        vmImage: 'windows-latest'
      rid: 'win-x64'
      vcvars: 'x64'
  - template: ci/build-windows.yml
    parameters:
      name: win_x86
      pool:
        vmImage: 'windows-latest'
      rid: 'win-x86'
      vcvars: 'x86'
  - template: ci/build-windows.yml
    parameters:
      name: win_arm64
      pool:
        vmImage: 'windows-latest'
      rid: 'win-arm64'
      vcvars: 'x64_arm64'
  - template: ci/build-windows.yml
    parameters:
      name: win_arm
      pool:
        vmImage: 'windows-latest'
      rid: 'win-arm'
      vcvars: 'x64_arm'

- stage: Archive
  jobs:
  - job: 'runtimes'
    pool:
        vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        path: '$(Build.ArtifactStagingDirectory)/runtimes/'
    - bash: |
        shopt -s extglob
        bin_path='$(Build.ArtifactStagingDirectory)/runtimes/'
        for rid in `ls $bin_path`; do
            mkdir $bin_path/$rid/native
            mv -t $bin_path/$rid/native $bin_path/$rid/!(native)
        done
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/runtimes'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/runtimes.zip'
        replaceExistingArchive: true
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/runtimes.zip
      artifact: runtimes.zip
    - publish: $(Build.ArtifactStagingDirectory)/runtimes
      artifact: runtimes

- stage: Nuget
  jobs:
  - job: 'pack'
    pool:
        vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: '5.4.0'
        checkLatest: true
    - pwsh: .\gen-nupkg.ps1
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        path: '$(Build.SourcesDirectory)/runtimes/'
    - script: mkdir $(Build.ArtifactStagingDirectory)\nupkg
    - task: NuGetCommand@2
      inputs:
        command: 'pack'
        packagesToPack: 'libjieba-c.nuspec'
        versioningScheme: 'off'
        packDestination: '$(Build.ArtifactStagingDirectory)/nupkg'
    - publish: $(Build.ArtifactStagingDirectory)/nupkg
      artifact: nuget_package

- stage: Release
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs:
  - job: 'github'
    pool:
        vmImage: 'ubuntu-latest'
    steps:
    - download: 'current'
    - bash: |
        mkdir release-assets
        mv $(Pipeline.Workspace)/runtimes.zip/* release-assets/
        mv $(Pipeline.Workspace)/nuget_package/* release-assets/
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'repo-oauth'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        assets: 'release-assets/*'
